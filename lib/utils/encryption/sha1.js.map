{"version":3,"sources":["../../../src/utils/encryption/sha1.js"],"names":["encodeUTF8","s","i","r","c","x","length","charCodeAt","push","sha1","data","Uint8Array","j","t","l","set","buffer","Uint32Array","DataView","getUint32","w","f","m","rol","n","k","o","slice","pop","unshift","hex","Array","prototype","map","call","e","toString","join"],"mappings":"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","file":"sha1.js","sourcesContent":["\r\n/* eslint-disable */\r\n\r\nfunction encodeUTF8(s) {\r\n  s = s || '';\r\n  if (typeof s !== 'string') s = '' + s;\r\n\r\n  var i, r = [], c, x;\r\n  for (i = 0; i < s.length; i++) {\r\n    if ((c = s.charCodeAt(i)) < 0x80) r.push(c);\r\n    else if (c < 0x800) r.push(0xC0 + (c >> 6 & 0x1F), 0x80 + (c & 0x3F));\r\n    else {\r\n      if ((x = c ^ 0xD800) >> 10 == 0) // 对四字节UTF-16转换为Unicode\r\n        c = (x << 10) + (s.charCodeAt(++i) ^ 0xDC00) + 0x10000,\r\n          r.push(0xF0 + (c >> 18 & 0x7), 0x80 + (c >> 12 & 0x3F));\r\n      else r.push(0xE0 + (c >> 12 & 0xF));\r\n      r.push(0x80 + (c >> 6 & 0x3F), 0x80 + (c & 0x3F));\r\n    };\r\n  }\r\n  return r;\r\n}\r\n\r\n// 字符串加密成 hex 字符串\r\nexport function sha1(s) {\r\n  var data = new Uint8Array(encodeUTF8(s))\r\n  var i, j, t;\r\n  var l = ((data.length + 8) >>> 6 << 4) + 16, s = new Uint8Array(l << 2);\r\n  s.set(new Uint8Array(data.buffer)), s = new Uint32Array(s.buffer);\r\n  for (t = new DataView(s.buffer), i = 0; i < l; i++)s[i] = t.getUint32(i << 2);\r\n  s[data.length >> 2] |= 0x80 << (24 - (data.length & 3) * 8);\r\n  s[l - 1] = data.length << 3;\r\n  var w = [], f = [\r\n    function () { return m[1] & m[2] | ~m[1] & m[3]; },\r\n    function () { return m[1] ^ m[2] ^ m[3]; },\r\n    function () { return m[1] & m[2] | m[1] & m[3] | m[2] & m[3]; },\r\n    function () { return m[1] ^ m[2] ^ m[3]; }\r\n  ], rol = function (n, c) { return n << c | n >>> (32 - c); },\r\n    k = [1518500249, 1859775393, -1894007588, -899497514],\r\n    m = [1732584193, -271733879, null, null, -1009589776];\r\n  m[2] = ~m[0], m[3] = ~m[1];\r\n  for (i = 0; i < s.length; i += 16) {\r\n    var o = m.slice(0);\r\n    for (j = 0; j < 80; j++)\r\n      w[j] = j < 16 ? s[i + j] : rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1),\r\n        t = rol(m[0], 5) + f[j / 20 | 0]() + m[4] + w[j] + k[j / 20 | 0] | 0,\r\n        m[1] = rol(m[1], 30), m.pop(), m.unshift(t);\r\n    for (j = 0; j < 5; j++)m[j] = m[j] + o[j] | 0;\r\n  };\r\n  t = new DataView(new Uint32Array(m).buffer);\r\n  for (var i = 0; i < 5; i++)m[i] = t.getUint32(i << 2);\r\n\r\n  var hex = Array.prototype.map.call(new Uint8Array(new Uint32Array(m).buffer), function (e) {\r\n    return (e < 16 ? \"0\" : \"\") + e.toString(16);\r\n  }).join(\"\");\r\n  return hex;\r\n}\r\n\r\n\r\n/* eslint-disable */"]}